#import <Foundation/Foundation.h>
#import <stdio.h>

@interface Node: NSObject
  
  @property (nonatomic) Node *left;
  @property (nonatomic) Node *right;
  @property (nonatomic) NSInteger value;

-(instancetype)initWithValue:(NSInteger)value left:(Node *)left right:(Node *)right;
  
@end

@implementation Node

-(instancetype)initWithValue:(NSInteger)value left:(Node *)left right:(Node *)right {

  self = [super init];
  self.value = value;
  self.left = left;
  self.right = right;
  return self;
}  
  
@end

@interface BinaryTree: NSObject
  @property (nonatomic) Node *root;
  @property (nonatomic) NSMutableArray *memory;

  -(void)breadthSearch;
@end
  
@implementation BinaryTree
  
  
  
  -(void)breadthSearch {
    self.memory = [NSMutableArray new];
    [self processNode: self.root];
    NSInteger count = 0;
    while(count < self.memory.count) {
      [self processNode:self.memory[count]];
      count++;
    }
}

 -(void)processNode:(Node *)node {
    NSLog(@"value: %d", node.value);
   if(node.left != nil) {
    [self.memory addObject: node.left];
   }
   if(node.right != nil) {
     [self.memory addObject: node.right];
   }
 }
  
@end


int main (int argc, const char * argv[])
{
  @autoreleasepool { 
   Node *n4 = [[Node alloc] initWithValue:4 left:nil right:nil];
    Node *n5 = [[Node alloc] initWithValue:5 left:nil right:nil];
    Node *n6 = [[Node alloc] initWithValue:6 left:nil right:nil];
    Node *n7 = [[Node alloc] initWithValue:7 left:nil right:nil];
    Node *n2 = [[Node alloc] initWithValue:2 left:n4 right:n5];
    Node *n3 = [[Node alloc] initWithValue:3 left:n6 right:n7];
    Node *n = [[Node alloc] initWithValue:1 left:n2 right:n3];
    BinaryTree *t = [BinaryTree new];
    t.root = n;
    [t breadthSearch];
  }
}